# Default values for jenkins.
# This is a YAML-formatted file.
# Declare name/value pairs to be passed into your templates.
# name: value

Master:
  Name: jenkins-master
  Image: "jenkinsci/jenkins"
  ImageTag: "2.62"
  ImagePullPolicy: "Always"
  Component: "jenkins-master"
  UseSecurity: true
  AdminUser: admin
  AdminPassword: admin
  Cpu: "200m"
  Memory: "256Mi"
# Set min/max heap here if needed with:
# JavaOpts: "-Xms512m -Xmx512m"
  ServicePort: 8080
# For minikube, set this to NodePort, elsewhere use LoadBalancer
# Use ClusterIP if your setup includes ingress controller
# ServiceType: LoadBalancer
  ServiceType: ClusterIP
# Used to create Ingress record (should used with ServiceType: ClusterIP)
# HostName: jenkins.cluster.local
# NodePort: <to set explicitly, choose port between 30000-32767
  ContainerPort: 8080
  SlaveListenerPort: 50000
  LoadBalancerSourceRanges: []
# List of plugins to be install during Jenkins master start
  InstallPlugins:
      - kubernetes:0.11
      - workflow-aggregator:2.5
      - credentials-binding:1.11
      - git:3.2.0
      - prometheus:latest
      - github-pullrequest:latest
      - github:latest
      - github-pr-comment-build:latest
      - github-branch-source:latest
# Used to approve a list of groovy functions in pipelines used the script-security plugin. Can be viewed under /scriptApproval
  # ScriptApproval:
  #   - "method groovy.json.JsonSlurperClassic parseText java.lang.String"
  #   - "new groovy.json.JsonSlurperClassic"
# List of groovy init scripts to be executed during Jenkins master start
  InitScripts:
  - |
    // Changing Jenkins URL
    import jenkins.model.JenkinsLocationConfiguration
    jlc = JenkinsLocationConfiguration.get()
    jlc.setUrl("https://jenkins.hack.bomba.by")
    jlc.save()
  - |
    // Adding ENV
    import jenkins.*
    import jenkins.model.*
    import hudson.*
    import hudson.model.*

    instance = Jenkins.getInstance()
    globalNodeProperties = instance.getGlobalNodeProperties()

    envVarsNodePropertyList = globalNodeProperties.getAll(hudson.slaves.EnvironmentVariablesNodeProperty.class)

    newEnvVarsNodeProperty = null
    envVars = null

    if (envVarsNodePropertyList == null || envVarsNodePropertyList.size() == 0) {
    newEnvVarsNodeProperty = new hudson.slaves.EnvironmentVariablesNodeProperty();
    globalNodeProperties.add(newEnvVarsNodeProperty)
    envVars = newEnvVarsNodeProperty.getEnvVars()
    } else {
    envVars = envVarsNodePropertyList.get(0).getEnvVars()
    }

    envVars.put("GITHUB_REPO", "EpamHackathon")

    instance.save()
  - |
    // Installing maven tool
    import hudson.tasks.Maven.MavenInstallation;
    import hudson.tools.InstallSourceProperty;
    import hudson.tools.ToolProperty;
    import hudson.tools.ToolPropertyDescriptor;
    import hudson.util.DescribableList;

    def mavenDesc = jenkins.model.Jenkins.instance.getExtensionList(hudson.tasks.Maven.DescriptorImpl.class)[0]

    def isp = new InstallSourceProperty()
    def autoInstaller = new hudson.tasks.Maven.MavenInstaller("3.3.9")
    isp.installers.add(autoInstaller)

    def proplist = new DescribableList<ToolProperty<?>, ToolPropertyDescriptor>()
    proplist.add(isp)

    def installation = new MavenInstallation("maven", "", proplist)

    mavenDesc.setInstallations(installation)
    mavenDesc.save()
  - |
    // Adding Credentials (secret text)
    import jenkins.model.*
    import com.cloudbees.plugins.credentials.*
    import com.cloudbees.plugins.credentials.common.*
    import com.cloudbees.plugins.credentials.domains.*
    import com.cloudbees.plugins.credentials.impl.*
    import org.jenkinsci.plugins.plaincredentials.*
    import org.jenkinsci.plugins.plaincredentials.impl.*
    import hudson.util.Secret

    domain = Domain.global()
    store = Jenkins.instance.getExtensionList('com.cloudbees.plugins.credentials.SystemCredentialsProvider')[0].getStore()

    secretText = new StringCredentialsImpl(
    CredentialsScope.GLOBAL,
    "dockerhub_creds",
    "Secret Text of dockerhub credentials",
    Secret.fromString("-u burakovsky -p 6ypa4ok"))

    store.addCredentials(domain, secretText)

  CustomConfigMap: false

  Ingress:
    Annotations:
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"

    TLS:
      # - secretName: jenkins.cluster.local
      #   hosts:
      #     - jenkins.cluster.local

Agent:
  Enabled: true
  Image: burakovsky/slave
  ImageTag: "1.0"
  Privileged: false
  Cpu: ""
  Memory: ""

Persistence:
  Enabled: true
  ## A manually managed Persistent Volume and Claim
  ## Requires Persistence.Enabled: true
  ## If defined, PVC must be created manually before volume will be bound
  # ExistingClaim:

  ## If defined, volume.beta.kubernetes.io/storage-class: <StorageClass>
  ## Default: volume.alpha.kubernetes.io/storage-class: default
  ##
  # StorageClass:
  AccessMode: ReadWriteOnce
  Size: 8Gi
  volumes:
#  - name: nothing
#    emptyDir: {}
  mounts:
#  - mountPath: /var/nothing
#    name: nothing
#    readOnly: true

